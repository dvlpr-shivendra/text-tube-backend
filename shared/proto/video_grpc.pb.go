// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.2
// source: proto/video.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoService_SearchChannel_FullMethodName      = "/video.VideoService/SearchChannel"
	VideoService_GetChannelVideos_FullMethodName   = "/video.VideoService/GetChannelVideos"
	VideoService_GetVideoDetails_FullMethodName    = "/video.VideoService/GetVideoDetails"
	VideoService_GetVideoTranscript_FullMethodName = "/video.VideoService/GetVideoTranscript"
)

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	SearchChannel(ctx context.Context, in *SearchChannelRequest, opts ...grpc.CallOption) (*SearchChannelResponse, error)
	GetChannelVideos(ctx context.Context, in *GetChannelVideosRequest, opts ...grpc.CallOption) (*GetChannelVideosResponse, error)
	GetVideoDetails(ctx context.Context, in *GetVideoDetailsRequest, opts ...grpc.CallOption) (*GetVideoDetailsResponse, error)
	GetVideoTranscript(ctx context.Context, in *GetVideoTranscriptRequest, opts ...grpc.CallOption) (*GetVideoTranscriptResponse, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) SearchChannel(ctx context.Context, in *SearchChannelRequest, opts ...grpc.CallOption) (*SearchChannelResponse, error) {
	out := new(SearchChannelResponse)
	err := c.cc.Invoke(ctx, VideoService_SearchChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetChannelVideos(ctx context.Context, in *GetChannelVideosRequest, opts ...grpc.CallOption) (*GetChannelVideosResponse, error) {
	out := new(GetChannelVideosResponse)
	err := c.cc.Invoke(ctx, VideoService_GetChannelVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoDetails(ctx context.Context, in *GetVideoDetailsRequest, opts ...grpc.CallOption) (*GetVideoDetailsResponse, error) {
	out := new(GetVideoDetailsResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoTranscript(ctx context.Context, in *GetVideoTranscriptRequest, opts ...grpc.CallOption) (*GetVideoTranscriptResponse, error) {
	out := new(GetVideoTranscriptResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoTranscript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	SearchChannel(context.Context, *SearchChannelRequest) (*SearchChannelResponse, error)
	GetChannelVideos(context.Context, *GetChannelVideosRequest) (*GetChannelVideosResponse, error)
	GetVideoDetails(context.Context, *GetVideoDetailsRequest) (*GetVideoDetailsResponse, error)
	GetVideoTranscript(context.Context, *GetVideoTranscriptRequest) (*GetVideoTranscriptResponse, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) SearchChannel(context.Context, *SearchChannelRequest) (*SearchChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChannel not implemented")
}
func (UnimplementedVideoServiceServer) GetChannelVideos(context.Context, *GetChannelVideosRequest) (*GetChannelVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelVideos not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoDetails(context.Context, *GetVideoDetailsRequest) (*GetVideoDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoDetails not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoTranscript(context.Context, *GetVideoTranscriptRequest) (*GetVideoTranscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoTranscript not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_SearchChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).SearchChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_SearchChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).SearchChannel(ctx, req.(*SearchChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetChannelVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetChannelVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetChannelVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetChannelVideos(ctx, req.(*GetChannelVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoDetails(ctx, req.(*GetVideoDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoTranscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoTranscript(ctx, req.(*GetVideoTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchChannel",
			Handler:    _VideoService_SearchChannel_Handler,
		},
		{
			MethodName: "GetChannelVideos",
			Handler:    _VideoService_GetChannelVideos_Handler,
		},
		{
			MethodName: "GetVideoDetails",
			Handler:    _VideoService_GetVideoDetails_Handler,
		},
		{
			MethodName: "GetVideoTranscript",
			Handler:    _VideoService_GetVideoTranscript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/video.proto",
}
